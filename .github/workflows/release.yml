name: Release Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-deploy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          releaseName: "PlanIt ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}"
          releaseBody: "See the assets to download and install this version."
          releaseDraft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.prerelease || false }}
          args: ${{ matrix.args }}

      - name: Upload to Cloudflare R2 (Unix)
        if: matrix.platform != 'windows-latest'
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_BUCKET: ${{ secrets.CLOUDFLARE_R2_BUCKET }}
          CLOUDFLARE_R2_ENDPOINT: ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
        run: |
          # Install AWS CLI for S3-compatible operations
          if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            sudo apt-get install -y awscli
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            brew install awscli
          fi
          
          # Configure AWS CLI for R2
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
          aws configure set region auto
          
          # Upload build artifacts to R2
          VERSION=${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          PLATFORM_NAME=""
          
          if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            PLATFORM_NAME="linux"
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              PLATFORM_NAME="darwin-aarch64"
            else
              PLATFORM_NAME="darwin-x64"
            fi
          fi
          
          # Find and upload build artifacts
          if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.deb" -o -name "*.AppImage" | while read file; do
              filename=$(basename "$file")
              aws s3 cp "$file" "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$PLATFORM_NAME/$filename" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT"
              echo "Uploaded: $filename to releases/$VERSION/$PLATFORM_NAME/"
            done
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.dmg" | while read file; do
              filename=$(basename "$file")
              aws s3 cp "$file" "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$PLATFORM_NAME/$filename" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT"
              echo "Uploaded: $filename to releases/$VERSION/$PLATFORM_NAME/"
            done
          fi
          
          # Upload updater files if they exist
          if [[ -f "src-tauri/target/${{ matrix.target }}/release/bundle/updater/latest.json" ]]; then
            aws s3 cp "src-tauri/target/${{ matrix.target }}/release/bundle/updater/latest.json" "s3://$CLOUDFLARE_R2_BUCKET/updates/latest.json" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT"
            echo "Uploaded updater manifest"
          fi
          
          # Upload signature files
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.sig" | while read file; do
            filename=$(basename "$file")
            aws s3 cp "$file" "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$PLATFORM_NAME/$filename" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT"
            echo "Uploaded signature: $filename"
          done

      - name: Upload to Cloudflare R2 (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_BUCKET: ${{ secrets.CLOUDFLARE_R2_BUCKET }}
          CLOUDFLARE_R2_ENDPOINT: ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
        shell: pwsh
        run: |
          # Install AWS CLI for S3-compatible operations
          choco install awscli -y
          
          # Configure AWS CLI for R2
          aws configure set aws_access_key_id $env:CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $env:CLOUDFLARE_R2_SECRET_ACCESS_KEY
          aws configure set region auto
          
          # Upload build artifacts to R2
          $VERSION = "${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}"
          $PLATFORM_NAME = "windows"
          
          # Debug: List the target directory structure
          Write-Host "Listing target directory structure:"
          if (Test-Path "src-tauri/target/${{ matrix.target }}/release/bundle") {
            Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release/bundle" -Recurse | ForEach-Object {
              Write-Host $_.FullName
            }
          } else {
            Write-Host "Bundle directory not found at src-tauri/target/${{ matrix.target }}/release/bundle"
          }
          
          # Find and upload MSI files
          $msiPath = "src-tauri/target/${{ matrix.target }}/release/bundle/msi"
          if (Test-Path $msiPath) {
            Get-ChildItem -Path $msiPath -Include "*.msi" | ForEach-Object {
              $filename = $_.Name
              aws s3 cp $_.FullName "s3://$env:CLOUDFLARE_R2_BUCKET/releases/$VERSION/$PLATFORM_NAME/$filename" --endpoint-url="$env:CLOUDFLARE_R2_ENDPOINT"
              Write-Host "Uploaded MSI: $filename to releases/$VERSION/$PLATFORM_NAME/"
            }
          }
          
          # Find and upload NSIS files
          $nsisPath = "src-tauri/target/${{ matrix.target }}/release/bundle/nsis"
          if (Test-Path $nsisPath) {
            Get-ChildItem -Path $nsisPath -Include "*.exe" | ForEach-Object {
              $filename = $_.Name
              aws s3 cp $_.FullName "s3://$env:CLOUDFLARE_R2_BUCKET/releases/$VERSION/$PLATFORM_NAME/$filename" --endpoint-url="$env:CLOUDFLARE_R2_ENDPOINT"
              Write-Host "Uploaded NSIS: $filename to releases/$VERSION/$PLATFORM_NAME/"
            }
          }
          
          # Upload updater files if they exist
          $updaterFile = "src-tauri/target/${{ matrix.target }}/release/bundle/updater/latest.json"
          if (Test-Path $updaterFile) {
            aws s3 cp $updaterFile "s3://$env:CLOUDFLARE_R2_BUCKET/updates/latest.json" --endpoint-url="$env:CLOUDFLARE_R2_ENDPOINT"
            Write-Host "Uploaded updater manifest"
          }
          
          # Upload signature files from MSI directory
          if (Test-Path $msiPath) {
            Get-ChildItem -Path $msiPath -Include "*.sig" | ForEach-Object {
              $filename = $_.Name
              aws s3 cp $_.FullName "s3://$env:CLOUDFLARE_R2_BUCKET/releases/$VERSION/$PLATFORM_NAME/$filename" --endpoint-url="$env:CLOUDFLARE_R2_ENDPOINT"
              Write-Host "Uploaded MSI signature: $filename"
            }
          }
          
          # Upload signature files from NSIS directory
          if (Test-Path $nsisPath) {
            Get-ChildItem -Path $nsisPath -Include "*.sig" | ForEach-Object {
              $filename = $_.Name
              aws s3 cp $_.FullName "s3://$env:CLOUDFLARE_R2_BUCKET/releases/$VERSION/$PLATFORM_NAME/$filename" --endpoint-url="$env:CLOUDFLARE_R2_ENDPOINT"
              Write-Host "Uploaded NSIS signature: $filename"
            }
          }

  create-release-manifest:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release manifest
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_BUCKET: ${{ secrets.CLOUDFLARE_R2_BUCKET }}
          CLOUDFLARE_R2_ENDPOINT: ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
        run: |
          # Update package list and install dependencies
          sudo apt-get update
          sudo apt-get install -y jq curl unzip
          
          # Install or update AWS CLI v2 using the official installer
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          # Check if AWS CLI is already installed and use --update flag if needed
          if [ -d "/usr/local/aws-cli" ]; then
            sudo ./aws/install --update
          else
            sudo ./aws/install
          fi
          
          # Configure AWS CLI for R2
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
          aws configure set region auto
          
          VERSION=${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          
          # Create release manifest
          cat > release-manifest.json << EOF
          {
            "version": "$VERSION",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "linux-x86_64": {
                "signature": "",
                "url": "https://oss.ttata.com/releases/$VERSION/linux/"
              },
              "darwin-x86_64": {
                "signature": "",
                "url": "https://oss.ttata.com/releases/$VERSION/darwin-x64/"
              },
              "darwin-aarch64": {
                "signature": "",
                "url": "https://oss.ttata.com/releases/$VERSION/darwin-aarch64/"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "https://oss.ttata.com/releases/$VERSION/windows/"
              }
            }
          }
          EOF
          
          # Upload release manifest
          aws s3 cp release-manifest.json "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/manifest.json" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT"
          echo "Release manifest created and uploaded"
          
          # Wait a bit for all uploads to complete
          echo "⏳ Waiting for all file uploads to complete..."
          sleep 30
          
          # Create latest.json for updater with proper format
          # Get app name from Cargo.toml
          APP_NAME=$(grep '^name = ' src-tauri/Cargo.toml | sed 's/name = "\(.*\)"/\1/')
          echo "📦 App name: $APP_NAME"
          
          # Function to get signature from R2
          get_signature() {
            local platform=$1
            local file_pattern=$2
            
            # Try to download and read signature file
            local sig_file=$(aws s3 ls "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$platform/" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" | grep "\.sig$" | grep "$file_pattern" | awk '{print $4}' | head -1)
            if [ ! -z "$sig_file" ]; then
              aws s3 cp "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$platform/$sig_file" "/tmp/$sig_file" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" 2>/dev/null
              if [ -f "/tmp/$sig_file" ]; then
                cat "/tmp/$sig_file"
                rm "/tmp/$sig_file"
              fi
            fi
          }
          
          # Function to find files with retry mechanism and improved debugging
          find_file_with_retry() {
            local platform=$1
            local pattern=$2
            local description="$3"
            local max_attempts=5
            local attempt=1
            
            echo "🔍 Searching for $description in platform: $platform"
            
            while [ $attempt -le $max_attempts ]; do
              echo "   Attempt $attempt/$max_attempts: Looking for pattern '$pattern'"
              
              # List all files in the platform directory for debugging
              if [ $attempt -eq 1 ]; then
                echo "   📁 All files in $platform directory:"
                aws s3 ls "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$platform/" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" 2>/dev/null | awk '{print "     " $4}' || echo "     ❌ Failed to list files"
              fi
              
              # Try multiple pattern matching approaches
              local file=""
              
              # Exact extension match
              file=$(aws s3 ls "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$platform/" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" 2>/dev/null | grep "\.$pattern$" | awk '{print $4}' | head -1)
              
              # If not found, try case-insensitive match
              if [ -z "$file" ]; then
                file=$(aws s3 ls "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$platform/" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" 2>/dev/null | grep -i "\.$pattern$" | awk '{print $4}' | head -1)
              fi
              
              # If still not found, try partial match
              if [ -z "$file" ]; then
                file=$(aws s3 ls "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/$platform/" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" 2>/dev/null | grep "$pattern" | awk '{print $4}' | head -1)
              fi
              
              if [ ! -z "$file" ]; then
                echo "   ✅ Found: $file"
                echo "$file"
                return 0
              fi
              
              echo "   ❌ No file matching '$pattern' found in $platform"
              
              if [ $attempt -lt $max_attempts ]; then
                echo "   ⏳ Waiting 10 seconds before retry..."
                sleep 10
              fi
              attempt=$((attempt + 1))
            done
            
            echo "   ❌ Failed to find $description after $max_attempts attempts"
            echo ""
          }
          
          # Get actual file names and signatures with debugging
          echo "🔍 Searching for files in R2 bucket for version: $VERSION"
          
          # List all files in the release directory for debugging
          echo "📁 Listing all files in releases/$VERSION/:"
          aws s3 ls "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/" --recursive --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" || echo "❌ Failed to list files"
          
          # Get files with retry mechanism and improved descriptions
          echo "🐧 Searching for Linux files..."
          LINUX_FILE=$(find_file_with_retry "linux" "AppImage" "Linux AppImage installer")
          LINUX_SIG=$(get_signature "linux" "AppImage")
          
          echo "🍎 Searching for macOS x64 files..."
          DARWIN_X64_FILE=$(find_file_with_retry "darwin-x64" "dmg" "macOS x64 DMG installer")
          DARWIN_X64_SIG=$(get_signature "darwin-x64" "dmg")
          
          echo "🍎 Searching for macOS ARM64 files..."
          DARWIN_AARCH64_FILE=$(find_file_with_retry "darwin-aarch64" "dmg" "macOS ARM64 DMG installer")
          DARWIN_AARCH64_SIG=$(get_signature "darwin-aarch64" "dmg")
          
          echo "🪟 Searching for Windows files..."
          WINDOWS_MSI_FILE=$(find_file_with_retry "windows" "msi" "Windows MSI installer")
          WINDOWS_MSI_SIG=$(get_signature "windows" "msi")
          
          WINDOWS_EXE_FILE=$(find_file_with_retry "windows" "exe" "Windows EXE installer")
          WINDOWS_EXE_SIG=$(get_signature "windows" "exe")
          
          # Also try alternative file extensions for better coverage
          if [ -z "$LINUX_FILE" ]; then
            echo "🔄 Trying alternative Linux formats..."
            LINUX_FILE=$(find_file_with_retry "linux" "deb" "Linux DEB package")
          fi
          
          if [ -z "$DARWIN_X64_FILE" ]; then
            echo "🔄 Trying alternative macOS x64 formats..."
            DARWIN_X64_FILE=$(find_file_with_retry "darwin-x64" "app.tar.gz" "macOS x64 app bundle")
          fi
          
          if [ -z "$DARWIN_AARCH64_FILE" ]; then
            echo "🔄 Trying alternative macOS ARM64 formats..."
            DARWIN_AARCH64_FILE=$(find_file_with_retry "darwin-aarch64" "app.tar.gz" "macOS ARM64 app bundle")
          fi
          
          # Summary of found files
          echo "📋 Final file search summary:"
          echo "   Linux AppImage: ${LINUX_FILE:-'❌ Not found'}"
          echo "   Linux Signature: ${LINUX_SIG:-'❌ Not found'}"
          echo "   macOS x64 File: ${DARWIN_X64_FILE:-'❌ Not found'}"
          echo "   macOS x64 Signature: ${DARWIN_X64_SIG:-'❌ Not found'}"
          echo "   macOS ARM64 File: ${DARWIN_AARCH64_FILE:-'❌ Not found'}"
          echo "   macOS ARM64 Signature: ${DARWIN_AARCH64_SIG:-'❌ Not found'}"
          echo "   Windows MSI: ${WINDOWS_MSI_FILE:-'❌ Not found'}"
          echo "   Windows MSI Signature: ${WINDOWS_MSI_SIG:-'❌ Not found'}"
          echo "   Windows EXE: ${WINDOWS_EXE_FILE:-'❌ Not found'}"
          echo "   Windows EXE Signature: ${WINDOWS_EXE_SIG:-'❌ Not found'}"
          
          # Fallback: If no files found, try a simpler approach
          if [ -z "$LINUX_FILE" ] && [ -z "$DARWIN_X64_FILE" ] && [ -z "$DARWIN_AARCH64_FILE" ] && [ -z "$WINDOWS_MSI_FILE" ] && [ -z "$WINDOWS_EXE_FILE" ]; then
            echo "🔄 No files found with primary method, trying fallback approach..."
            
            # List all files and try to match them manually
            echo "📁 All files in release directory:"
            ALL_FILES=$(aws s3 ls "s3://$CLOUDFLARE_R2_BUCKET/releases/$VERSION/" --recursive --endpoint-url="$CLOUDFLARE_R2_ENDPOINT" 2>/dev/null | awk '{print $4}')
            echo "$ALL_FILES"
            
            # Try to find files using simple grep
            LINUX_FILE=$(echo "$ALL_FILES" | grep -i "linux" | grep -i "appimage" | head -1 | xargs basename 2>/dev/null)
            DARWIN_X64_FILE=$(echo "$ALL_FILES" | grep -i "darwin" | grep -i "x64\|x86_64" | grep -i "dmg\|app" | head -1 | xargs basename 2>/dev/null)
            DARWIN_AARCH64_FILE=$(echo "$ALL_FILES" | grep -i "darwin" | grep -i "aarch64\|arm64" | grep -i "dmg\|app" | head -1 | xargs basename 2>/dev/null)
            WINDOWS_MSI_FILE=$(echo "$ALL_FILES" | grep -i "windows" | grep -i "msi" | head -1 | xargs basename 2>/dev/null)
            WINDOWS_EXE_FILE=$(echo "$ALL_FILES" | grep -i "windows" | grep -i "exe" | head -1 | xargs basename 2>/dev/null)
            
            echo "🔄 Fallback search results:"
            echo "   Linux AppImage: ${LINUX_FILE:-'❌ Still not found'}"
            echo "   macOS x64 File: ${DARWIN_X64_FILE:-'❌ Still not found'}"
            echo "   macOS ARM64 File: ${DARWIN_AARCH64_FILE:-'❌ Still not found'}"
            echo "   Windows MSI: ${WINDOWS_MSI_FILE:-'❌ Still not found'}"
            echo "   Windows EXE: ${WINDOWS_EXE_FILE:-'❌ Still not found'}"
          fi
          
          # Create latest.json with proper Tauri updater format
          echo "🔧 Creating latest.json..."
          
          # Start building the JSON content
          JSON_CONTENT='{
            "version": "'$VERSION'",
            "notes": "Release '$VERSION'",
            "pub_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "platforms": {'
          
          PLATFORM_ENTRIES=""
          
          # Add Linux platform if file exists
          if [ ! -z "$LINUX_FILE" ]; then
            echo "✅ Adding Linux platform to latest.json"
            if [ ! -z "$PLATFORM_ENTRIES" ]; then
              PLATFORM_ENTRIES="$PLATFORM_ENTRIES,"
            fi
            PLATFORM_ENTRIES="$PLATFORM_ENTRIES
              \"linux-x86_64\": {
                \"signature\": \"${LINUX_SIG:-\"\"}\",
                \"url\": \"https://oss.ttata.com/releases/$VERSION/linux/$LINUX_FILE\"
              }"
          fi
          
          # Add macOS x64 platform if file exists
          if [ ! -z "$DARWIN_X64_FILE" ]; then
            echo "✅ Adding macOS x64 platform to latest.json"
            if [ ! -z "$PLATFORM_ENTRIES" ]; then
              PLATFORM_ENTRIES="$PLATFORM_ENTRIES,"
            fi
            PLATFORM_ENTRIES="$PLATFORM_ENTRIES
              \"darwin-x86_64\": {
                \"signature\": \"${DARWIN_X64_SIG:-\"\"}\",
                \"url\": \"https://oss.ttata.com/releases/$VERSION/darwin-x64/$DARWIN_X64_FILE\"
              }"
          fi
          
          # Add macOS ARM64 platform if file exists
          if [ ! -z "$DARWIN_AARCH64_FILE" ]; then
            echo "✅ Adding macOS ARM64 platform to latest.json"
            if [ ! -z "$PLATFORM_ENTRIES" ]; then
              PLATFORM_ENTRIES="$PLATFORM_ENTRIES,"
            fi
            PLATFORM_ENTRIES="$PLATFORM_ENTRIES
              \"darwin-aarch64\": {
                \"signature\": \"${DARWIN_AARCH64_SIG:-\"\"}\",
                \"url\": \"https://oss.ttata.com/releases/$VERSION/darwin-aarch64/$DARWIN_AARCH64_FILE\"
              }"
          fi
          
          # Add Windows platform (prefer MSI over EXE)
          if [ ! -z "$WINDOWS_MSI_FILE" ]; then
            echo "✅ Adding Windows MSI platform to latest.json"
            if [ ! -z "$PLATFORM_ENTRIES" ]; then
              PLATFORM_ENTRIES="$PLATFORM_ENTRIES,"
            fi
            PLATFORM_ENTRIES="$PLATFORM_ENTRIES
              \"windows-x86_64\": {
                \"signature\": \"${WINDOWS_MSI_SIG:-\"\"}\",
                \"url\": \"https://oss.ttata.com/releases/$VERSION/windows/$WINDOWS_MSI_FILE\"
              }"
          elif [ ! -z "$WINDOWS_EXE_FILE" ]; then
            echo "✅ Adding Windows EXE platform to latest.json"
            if [ ! -z "$PLATFORM_ENTRIES" ]; then
              PLATFORM_ENTRIES="$PLATFORM_ENTRIES,"
            fi
            PLATFORM_ENTRIES="$PLATFORM_ENTRIES
              \"windows-x86_64\": {
                \"signature\": \"${WINDOWS_EXE_SIG:-\"\"}\",
                \"url\": \"https://oss.ttata.com/releases/$VERSION/windows/$WINDOWS_EXE_FILE\"
              }"
          fi
          
          # Complete the JSON structure
          JSON_CONTENT="$JSON_CONTENT$PLATFORM_ENTRIES
            }
          }"
          
          # Write the JSON to file
          echo -e "$JSON_CONTENT" > latest.json
          
          echo "📄 Generated latest.json content:"
          cat latest.json
          
          # Validate JSON format
          if jq empty latest.json 2>/dev/null; then
            echo "✓ latest.json is valid JSON"
            cat latest.json
          else
            echo "✗ latest.json is invalid JSON, fixing..."
            # Fallback: create a simple valid JSON
            cat > latest.json << EOF
          {
            "version": "$VERSION",
            "notes": "Release $VERSION",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {}
          }
          EOF
          fi
          
          # Upload latest.json for updater
          aws s3 cp latest.json "s3://$CLOUDFLARE_R2_BUCKET/releases/latest.json" --endpoint-url="$CLOUDFLARE_R2_ENDPOINT"
          echo "Latest.json created and uploaded for updater"
